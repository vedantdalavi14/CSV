:
📦 Project Title: Smart CSV Cleaner – Hybrid CLI + Natural Language Data Cleaning Tool

🧠 GOAL:
Build a powerful, user-friendly **Python CLI tool** for cleaning messy CSV files. Like Black is for Python formatting, this tool is for CSVs — but smarter. It supports **both traditional CLI flags** and **natural language commands** like:  
"fix column names and remove outliers from salary column".

📌 The tool:
- Cleans CSVs via traditional flags: --fix-names, --fix-missing mean, etc.
- Supports intuitive natural language: “standardize data types and remove outliers”.
- Logs all transformations.
- Outputs cleaned data in .csv or .xlsx.
- Is modular, extensible, and testable.

---

🔧 TOOLS & LIBRARIES:
- click – for robust CLI interface
- pandas – for core data operations
- tabulate – for clean previews in terminal
- openpyxl – for Excel export
- re / spaCy – for NLP command parsing
- logging – to track all transformation steps
- pytest – for test cases

---

📁 FOLDER STRUCTURE:
smart_csv_cleaner/
│
├── cli.py # CLI Entry point
├── main.py # Central logic dispatcher
├── parser/
│ └── nlp_parser.py # NLP → Flags converter
│
├── cleaner/ # Individual cleaning modules
│ ├── init.py
│ ├── fix_names.py
│ ├── fix_missing.py
│ ├── drop_outliers.py
│ ├── standardize_types.py
│ └── export.py
│
├── utils/
│ ├── logger.py # Logger setup
│ └── helpers.py # Shared logic
│
├── tests/ # Test cases
│ ├── test_fix_names.py
│ ├── test_outliers.py
│ ├── test_missing.py
│ ├── test_parser.py
│ └── test_end_to_end.py
│
├── requirements.txt
├── README.md
└── setup.py 

---

🎯 FEATURES:

### 1. Column Name Fixing
- Flags:
  --fix-names
- Natural:
  “fix headers”, “clean column names”, “standardize titles”
- Behavior:
  - Strip whitespace
  - Lowercase everything
  - Replace spaces with underscores
  - Remove special characters

### 2. Missing Data Handling
- Flags:
  --fix-missing mean|median|mode|drop
- Natural:
  “fill missing using median”, “drop rows with nulls”
- Behavior:
  - Detect NaNs
  - Fill strategy per column
  - Drop rows if selected

### 3. Outlier Detection & Removal
- Flags:
  --drop-outliers zscore|iqr
- Natural:
  “remove outliers”, “drop strange values in ‘age’ column”
- Behavior:
  - Z-score or IQR per numeric column
  - Threshold adjustable
  - Logs rows removed

### 4. Data Type Standardization
- Flags:
  --standardize-types
- Natural:
  “convert formats”, “standardize columns”
- Behavior:
  - Convert string to datetime, int, float, bool where applicable

### 5. File Export
- Flags:
  --output cleaned.csv  
  --excel (optional)
- Behavior:
  - Export to CSV by default
  - Optional .xlsx via openpyxl
  - Clean filename generation

### 6. Transformation Logging
- Flags:
  --log logfile.log
- Behavior:
  - Every step, timestamped
  - e.g., “✔ Replaced 12 missing values in 'salary' using mean”
  - Optional console preview via tabulate

### 7. Dual Input Support
- CLI Mode:
  clean-csv file.csv --fix-names --fix-missing mean
- NLP Mode:
  clean-csv file.csv "fix the column names and remove outliers"
- Parser:
  nlp_parser.py maps known phrases → actions
  Uses:
  - Simple regex (Phase 1)
  - spaCy (Phase 2) for named entity parsing

---

🛠 WORKING STEPS / LOGIC FLOW:

1. **Startup & Input Parsing**
   - The user runs the command with either:
     - Only flags
     - Only natural language
     - Or a combination of both

2. **Natural Language Processing (if present)**
   - Text passed to nlp_parser.py
   - Converts phrases like “remove outliers” to corresponding flags: --drop-outliers
   - Handles synonyms, order-insensitivity

3. **Dispatcher Logic (main.py)**
   - Merges CLI flags and NLP-derived flags
   - Prioritizes CLI flags if conflict occurs
   - Passes final operations list to core logic

4. **Data Cleaning Pipeline**
   - Load CSV using pandas
   - Execute transformations in this order:
     1. Fix column names
     2. Handle missing data
     3. Remove outliers
     4. Standardize types
   - After each step:
     - Modify DataFrame
     - Write entry to log

5. **Export Results**
   - Output final DataFrame to CSV or Excel
   - Save log file

6. **Console Feedback**
   - Use tabulate to show a preview of cleaned data (first 5 rows)
   - Print success summary

---

🧪 TEST CASES (MANDATORY)

**Unit Tests:**
- test_fix_names.py  
  - whitespace, casing, special characters
- test_missing.py  
  - correct mean/median replacement
- test_outliers.py  
  - IQR/Z-score remove correct rows
- test_standardize_types.py  
  - string → datetime, bool, int

**Parser Tests:**
- test_parser.py
  - NLP → correct flags
  - Unexpected inputs fallback

**End-to-End:**
- CSV input → final cleaned file + log
- Mixed input: CLI + NLP (should resolve cleanly)
- Large file performance

---

📌 CRITICAL USE CASES & EDGE CASES:

- Column with mixed types ("123", "abc") – data type conversion fallback
- Columns with all NaNs – skip or drop
- Outliers in small datasets – warn instead of remove
- NLP command ambiguities – resolve via priority order
- User inputs invalid flag or invalid NLP command – graceful error
- Combining CLI flags + NLP – NLP parsed first → flags override